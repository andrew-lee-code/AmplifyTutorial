from datetime import datetime
import json
import os
import logging
import time
import uuid
import boto3
from boto3.dynamodb.conditions import Key, Attr

logger = logging.getLogger()
logger.setLevel(logging.INFO)
dynamodb = boto3.resource('dynamodb')

BIN_TABLE = os.environ.get("API_DEMIAPP_BINTABLE_NAME")
BIN_TYPE_TABLE = os.environ.get("API_DEMIAPP_BINTYPETABLE_NAME")
REQUEST_HTTP_METHOD_FIELD = "httpMethod"
REQUEST_POST_BODY_FIELD = "body"


# TABLE COLUMNS
BIN_COL_ID = "id"
BIN_COL_LABEL_ID = "binLabel"

POST_BODY_FIELD_LABEL_DATA = "labelData"


def handler(event, context):
    logger.info(f'## ENVIRONMENT VARIABLES:\n{os.environ}')
    logger.info(f'## EVENT:\n{event}')

    http_verb = event[REQUEST_HTTP_METHOD_FIELD]

    if http_verb == "POST":
        try:
            request_body = json.loads(event[REQUEST_POST_BODY_FIELD])

            if validate_post_body(request_body):
                label_data = request_body[POST_BODY_FIELD_LABEL_DATA]

                is_valid = validate_label_data(label_data)
                
                return make_return_obj(200, str(is_valid))

            else:
                return make_return_obj(400, "Invalid POST data")

        except Exception as e:
            logger.exception(repr(e))
            return make_return_obj(500, "Error validating label data")

    else:
        return make_return_obj(400, "Invalid http request")


def make_return_obj(statusCode, body):
  return {
    'statusCode': statusCode,
    'headers': {
      'Access-Control-Allow-Headers': '*',
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
    },
    'body': body
  }

def validate_post_body(post_body: dict):
    is_valid = True
    try:
        if len(post_body.keys()) != 1 :
            is_valid=False
        if not (isinstance(post_body[POST_BODY_FIELD_LABEL_DATA], str) 
                and (len(post_body[POST_BODY_FIELD_LABEL_DATA]) < 50)
                and post_body[POST_BODY_FIELD_LABEL_DATA]):
            is_valid=False

    except Exception as e:
        logger.exception(repr(e))

    return is_valid


def validate_label_data(label_data: str):
    # TODO: Think of an actual mechanism to validate bin data
    if "demi" in label_data:
        return True
    else:
        return False
    